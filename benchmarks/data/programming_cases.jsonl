{"id":"mutable_default","title":"Mutable default argument","language":"python","code":"def concatenate(a, b=[]):\n    b.append(a)\n    return b\n","base_prompt":"Review this Python function and suggest improvements (clarity, safety, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["mutable\\s+default","default\\s+mutable","b\\s*=\\s*\\[\\]"],"fix_patterns":["b\\s*=\\s*None","if\\s+b\\s+is\\s+None"],"focus":"correctness"}
{"id":"off_by_one","title":"Off-by-one in inclusive range","language":"python","code":"def inclusive_range(n):\n    return list(range(1, n))\n","base_prompt":"Review this Python function and suggest improvements (correctness, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["off[- ]?by[- ]?one","missing\\s+n","excludes\\s+n","range\\(1,\\s*n\\)"],"fix_patterns":["n\\+1","range\\(1,\\s*n\\+1\\)"],"focus":"correctness"}
{"id":"file_leak","title":"File handle not closed","language":"python","code":"def read_first_line(path):\n    f = open(path, 'r')\n    return f.readline()\n","base_prompt":"Review this Python function and suggest improvements (resource safety, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["file\\s+not\\s+closed","resource\\s+leak","open\\(.*\\)\\s*without\\s*with","missing\\s+context\\s+manager"],"fix_patterns":["with\\s+open\\(","context\\s+manager"],"focus":"safety"}
{"id":"bare_except","title":"Bare except swallows exceptions","language":"python","code":"def parse_int(x):\n    try:\n        return int(x)\n    except:\n        return None\n","base_prompt":"Review this Python function and suggest improvements (error handling, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["bare\\s+except","except\\s*:\\s*$","swallow","silence\\s+exception"],"fix_patterns":["except\\s*\\(\\s*ValueError","except\\s*\\(\\s*ValueError\\s*,\\s*TypeError"],"focus":"robustness"}
{"id":"shallow_copy","title":"Aliasing instead of copy","language":"python","code":"def duplicate_and_modify(d):\n    c = d\n    c['x'] = 1\n    return d\n","base_prompt":"Review this Python function and suggest improvements (correctness, side effects, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["alias","shallow\\s+copy","same\\s+object","modifies\\s+original"],"fix_patterns":["d\\.copy\\(\\)","copy\\.deepcopy"],"focus":"correctness"}
{"id":"sql_injection","title":"SQL injection via string concat","language":"python","code":"def load_user(cur, name):\n    q = f\"SELECT * FROM users WHERE name = '{name}'\"\n    return cur.execute(q).fetchone()\n","base_prompt":"Review this Python function and suggest improvements (security, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["sql\\s+injection","string\\s+concatenation","unsanitized","tainted\\s+input"],"fix_patterns":["parameterized","prepared","execute\\(.*?\\?,","\\(name\\)"],"focus":"security"}
{"id":"path_traversal","title":"Path traversal risk","language":"python","code":"import os\nfrom pathlib import Path\n\ndef read_user_file(base_dir, name):\n    path = os.path.join(base_dir, name)\n    with open(path, 'r') as f:\n        return f.read()\n","base_prompt":"Review this Python function and suggest improvements (security, validation, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["path\\s+traversal","\\.\\.\\/","\\.\\.\\\\","outside\\s+base","no\\s+validation"],"fix_patterns":["resolve\\(\\)","absolute","startswith","sanitize","allowlist"],"focus":"security"}
{"id":"float_eq","title":"Floating-point equality check","language":"python","code":"import math\n\ndef is_one(x):\n    return x == 0.1 + 0.2\n","base_prompt":"Review this Python function and suggest improvements (numerics, tests).","tesc_prompt":"Audit this Python function and produce structured recommendations as a contract.","bug_patterns":["floating[- ]?point","equality","precision","0\\.1\\s*\\+\\s*0\\.2","0\\.3"],"fix_patterns":["math\\.isclose","tolerance","rel_tol","abs_tol"],"focus":"correctness"}
